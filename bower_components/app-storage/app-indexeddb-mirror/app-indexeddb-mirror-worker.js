(function(){'use strict';function a(a,b){a=a||'app-mirror',b=b||'mirrored_data',this[d]=a,this[e]=b,this[c]=[],this[f]=null,this.supportsIndexedDB=null!=self.indexedDB,self.Promise&&this.supportsIndexedDB||console.error('Indexeddb Mirror is not supported'),this.openDb(),self.addEventListener('unhandledrejection',function(a){console.error(a)}),self.addEventListener('error',function(a){console.error(a)}),console.log('AppIndexedDBMirrorWorker started...')}var b='internal',c='__clientPorts',d='__dbName',e='__storeName',f='__dbOpens',g=[function(a){a.database.createObjectStore(a.storeName)},function(a){a.database.createObjectStore(b)}];a.prototype={openDb:function(){return this.__dbOpens=this.__dbOpens||new Promise(function(a,b){console.log('Opening database..');var c=self.indexedDB.open(this[d],2);c.onupgradeneeded=function(a){console.log('Upgrade needed:',a.oldVersion,'=>',a.newVersion);for(var b={database:c.result,storeName:this[e],dbName:this[d]},f=a.oldVersion;f<a.newVersion;++f)g[f]&&g[f].call(this,b)}.bind(this),c.onsuccess=function(){console.log('Database opened.'),a(c.result)},c.onerror=function(){b(c.error)}}.bind(this)),this.__dbOpens},closeDb:function(){return null==this.__dbOpens?Promise.resolve():this.openDb().then(function(a){this.__dbOpens=null,console.log('Closing database..'),a.close()}.bind(this))},operateOnStore:function(a,b,c){if(self.Promise&&this.supportsIndexedDB){var d=Array.from(arguments).slice(3);return this.openDb().then(function(e){return console.log('Store operation:',a,b,c,d),new Promise(function(f,g){try{var h=e.transaction(b,c),i=h.objectStore(b),j=i[a].apply(i,d)}catch(a){return g(a)}h.oncomplete=function(){f(j.result)},h.onabort=function(){g(h.error)}})})}},get:function(a,b){return this.operateOnStore('get',a,'readonly',b)},set:function(a,b,c){return this.operateOnStore('put',a,'readwrite',c,b)},clear:function(a){return this.operateOnStore('clear',a,'readwrite')},transaction:function(a,b,c){return c=c||null,'get'===a?this.get(this[e],b):'set'===a?this.set(this[e],b,c):Promise.reject(new Error('Method not supported: '+a))},validateSession:function(a){return Promise.all([this.openDb(),this.get(b,'session')]).then(function(c){var d=c[0],f=c[1],g=[];a!==f&&(null!=f&&g.push(this.clear(this[e])),g.push(this.set(b,'session',a)))}.bind(this))},registerClient:function(a){a.addEventListener('message',function(b){this.handleClientMessage(b,a)}.bind(this));var b=a.toString()in this[c];b||this[c].push(a),a.start(),a.postMessage({type:'app-mirror-connected',supportsIndexedDB:this.supportsIndexedDB}),console.log('New client connected.')},handleClientMessage:function(a,b){if(!a.data)return null;var d=a.data.id;switch(a.data.type){case'app-mirror-close-db':this.closeDb().then(function(){b.postMessage({type:'app-mirror-db-closed',id:d})});case'app-mirror-validate-session':this.validateSession(a.data.session).then(function(){b.postMessage({type:'app-mirror-session-validated',id:d})});break;case'app-mirror-transaction':this.transaction(a.data.method,a.data.key,a.data.value).then(function(a){b.postMessage({type:'app-mirror-transaction-result',id:d,result:a})});break;case'app-mirror-disconnect':var e=this[c].indexOf(b);-1!==e&&this[c].splice(e,1);}}},self.appIndexedDBMirrorWorker=new a,self.addEventListener('connect',function(a){self.appIndexedDBMirrorWorker.registerClient(a.ports[0])})})();